// Code generated by command: go run asm.go -out ../field_amd64.s -pkg curve1174. DO NOT EDIT.

// +build !curve1174_purego

#include "textflag.h"

// func mul(res *FieldElement, x *FieldElement, y *FieldElement)
// Requires: ADX, BMI2, CMOV
TEXT ·mul(SB), NOSPLIT, $0-24
	CMPB ·cpuSupported+0(SB), $0x01
	JNE  mulNoAdx
	MOVQ x+8(FP), R11
	MOVQ y+16(FP), R12

	// Fill all regs
	MOVQ  24(R11), DX
	MULXQ 8(R12), DI, R8
	MULXQ 24(R12), R9, R10
	MOVQ  (R11), DX
	MULXQ (R12), CX, BX
	MULXQ 16(R12), BP, SI
	XORQ  AX, AX

	// First 1-5 chain
	// x[0]*y[1]
	MULXQ 8(R12), R13, DX
	ADCXQ R13, BX
	ADOXQ DX, BP

	// x[2]*y[0]
	MOVQ  16(R11), DX
	MULXQ (R12), R14, R13
	ADCXQ R14, BP
	ADOXQ R13, SI

	// x[2]*y[1]
	MULXQ 8(R12), R14, R13
	ADCXQ R14, SI
	ADOXQ R13, DI

	// x[2]*y[2]
	MULXQ 16(R12), R14, R13
	ADCXQ R14, DI
	ADOXQ R13, R8

	// x[2]*y[3]
	MULXQ 24(R12), R13, DX
	ADCXQ R13, R8
	ADOXQ DX, R9

	// Carry 6-8
	ADCXQ AX, R9
	ADOXQ AX, R10
	ADCXQ AX, R10

	// Second 1-5 chain
	// x[1]*y[0]
	MOVQ  8(R11), DX
	MULXQ (R12), R14, R13
	ADCXQ R14, BX
	ADOXQ R13, BP

	// x[1]*y[1]
	MULXQ 8(R12), R14, R13
	ADCXQ R14, BP
	ADOXQ R13, SI

	// x[1]*y[2]
	MULXQ 16(R12), R14, R13
	ADCXQ R14, SI
	ADOXQ R13, DI

	// x[1]*y[3]
	MULXQ 24(R12), R13, DX
	ADCXQ R13, DI
	ADOXQ DX, R8

	// x[3]*y[2]
	MOVQ  24(R11), DX
	MULXQ 16(R12), R14, R13
	ADCXQ R14, R8
	ADOXQ R13, R9

	// Carry 6-8
	ADCXQ AX, R9
	ADOXQ AX, R10
	ADCXQ AX, R10

	// x[3]*y[0]
	MULXQ (R12), R13, DX
	ADCXQ R13, SI
	ADOXQ DX, DI

	// Carry 4-8
	ADCXQ AX, DI
	ADOXQ AX, R8
	ADCXQ AX, R8
	ADOXQ AX, R9
	ADCXQ AX, R9
	ADOXQ AX, R10
	ADCXQ AX, R10

	// x[0]*y[3]
	MOVQ  (R11), DX
	MULXQ 24(R12), R11, DX
	ADCXQ R11, SI
	ADOXQ DX, DI

	// Carry 4-8
	ADCXQ AX, DI
	ADOXQ AX, R8
	ADCXQ AX, R8
	ADOXQ AX, R9
	ADCXQ AX, R9
	ADOXQ AX, R10
	ADCXQ AX, R10

	// Mod 1st stage
	SHLQ $0x05, R9, R10
	SHLQ $0x05, R8, R9
	SHLQ $0x05, DI, R8
	SHLQ $0x05, SI, DI
	MOVQ $0x07ffffffffffffff, AX
	ANDQ AX, SI
	ADDQ DI, CX
	ADCQ R8, BX
	ADCQ R9, BP
	ADCQ R10, SI
	SHLQ $0x03, R9, R10
	SHLQ $0x03, R8, R9
	SHLQ $0x03, DI, R8
	SHLQ $0x03, DI
	ADDQ DI, CX
	ADCQ R8, BX
	ADCQ R9, BP
	ADCQ R10, SI

	// Mod 2nd stage
	MOVQ SI, R10
	SHRQ $0x3b, R10
	MOVQ $0x07ffffffffffffff, AX
	ANDQ AX, SI

	// regs[7] = regs[7]*9
	LEAQ    (R10)(R10*8), R10
	ADDQ    R10, CX
	ADCQ    $0x00, BX
	ADCQ    $0x00, BP
	ADCQ    $0x00, SI
	MOVQ    $0xffffffffffffffff, DX
	MOVQ    $0xfffffffffffffff7, R11
	MOVQ    CX, DI
	MOVQ    BX, R8
	MOVQ    BP, R9
	MOVQ    SI, R10
	SUBQ    R11, DI
	SBBQ    DX, R8
	SBBQ    DX, R9
	SBBQ    AX, R10
	CMOVQCC DI, CX
	CMOVQCC R8, BX
	CMOVQCC R9, BP
	CMOVQCC R10, SI

	// Store results
	MOVQ res+0(FP), AX
	MOVQ CX, (AX)
	MOVQ BX, 8(AX)
	MOVQ BP, 16(AX)
	MOVQ SI, 24(AX)
	RET

mulNoAdx:
	MOVQ  x+8(FP), R11
	MOVQ  res+0(FP), AX
	MOVQ  y+16(FP), R12
	MOVQ  (R11), AX
	MULQ  (R12)
	MOVQ  AX, CX
	MOVQ  DX, BX
	MOVQ  (R11), AX
	MULQ  16(R12)
	MOVQ  AX, BP
	MOVQ  DX, SI
	MOVQ  24(R11), AX
	MULQ  8(R12)
	MOVQ  AX, DI
	MOVQ  DX, R8
	MOVQ  24(R11), AX
	MULQ  24(R12)
	MOVQ  AX, R9
	MOVQ  DX, R10
	MOVB  $0x01, R13
	MOVQ  8(R11), AX
	MULQ  (R12)
	CMPB  R13, $0x01
	ADCQ  AX, BX
	ADCQ  DX, BP
	SETCC R13
	MOVQ  (R11), AX
	MULQ  24(R12)
	CMPB  R13, $0x01
	ADCQ  AX, SI
	ADCQ  DX, DI
	SETCC R13
	MOVQ  16(R11), AX
	MULQ  24(R12)
	CMPB  R13, $0x01
	ADCQ  AX, R8
	ADCQ  DX, R9
	SETCC R13
	ADCQ  $0x00, R10
	MOVB  $0x01, R13
	MOVQ  (R11), AX
	MULQ  8(R12)
	CMPB  R13, $0x01
	ADCQ  AX, BX
	ADCQ  DX, BP
	SETCC R13
	MOVQ  8(R11), AX
	MULQ  16(R12)
	CMPB  R13, $0x01
	ADCQ  AX, SI
	ADCQ  DX, DI
	SETCC R13
	MOVQ  24(R11), AX
	MULQ  16(R12)
	CMPB  R13, $0x01
	ADCQ  AX, R8
	ADCQ  DX, R9
	SETCC R13
	ADCQ  $0x00, R10
	MOVB  $0x01, R13
	MOVQ  8(R11), AX
	MULQ  8(R12)
	CMPB  R13, $0x01
	ADCQ  AX, BP
	ADCQ  DX, SI
	SETCC R13
	MOVQ  8(R11), AX
	MULQ  24(R12)
	CMPB  R13, $0x01
	ADCQ  AX, DI
	ADCQ  DX, R8
	SETCC R13
	ADCQ  $0x00, R9
	ADCQ  $0x00, R10
	MOVB  $0x01, R13
	MOVQ  16(R11), AX
	MULQ  (R12)
	CMPB  R13, $0x01
	ADCQ  AX, BP
	ADCQ  DX, SI
	SETCC R13
	MOVQ  16(R11), AX
	MULQ  16(R12)
	CMPB  R13, $0x01
	ADCQ  AX, DI
	ADCQ  DX, R8
	SETCC R13
	ADCQ  $0x00, R9
	ADCQ  $0x00, R10
	MOVB  $0x01, R13
	MOVQ  16(R11), AX
	MULQ  8(R12)
	CMPB  R13, $0x01
	ADCQ  AX, SI
	ADCQ  DX, DI
	SETCC R13
	ADCQ  $0x00, R8
	ADCQ  $0x00, R9
	ADCQ  $0x00, R10
	MOVB  $0x01, R13
	MOVQ  24(R11), AX
	MULQ  (R12)
	CMPB  R13, $0x01
	ADCQ  AX, SI
	ADCQ  DX, DI
	SETCC R13
	ADCQ  $0x00, R8
	ADCQ  $0x00, R9
	ADCQ  $0x00, R10

	// Mod 1st stage
	SHLQ $0x05, R9, R10
	SHLQ $0x05, R8, R9
	SHLQ $0x05, DI, R8
	SHLQ $0x05, SI, DI
	MOVQ $0x07ffffffffffffff, AX
	ANDQ AX, SI
	ADDQ DI, CX
	ADCQ R8, BX
	ADCQ R9, BP
	ADCQ R10, SI
	SHLQ $0x03, R9, R10
	SHLQ $0x03, R8, R9
	SHLQ $0x03, DI, R8
	SHLQ $0x03, DI
	ADDQ DI, CX
	ADCQ R8, BX
	ADCQ R9, BP
	ADCQ R10, SI

	// Mod 2nd stage
	MOVQ SI, R10
	SHRQ $0x3b, R10
	MOVQ $0x07ffffffffffffff, AX
	ANDQ AX, SI

	// regs[7] = regs[7]*9
	LEAQ    (R10)(R10*8), R10
	ADDQ    R10, CX
	ADCQ    $0x00, BX
	ADCQ    $0x00, BP
	ADCQ    $0x00, SI
	MOVQ    $0xffffffffffffffff, DX
	MOVQ    $0xfffffffffffffff7, R11
	MOVQ    CX, DI
	MOVQ    BX, R8
	MOVQ    BP, R9
	MOVQ    SI, R10
	SUBQ    R11, DI
	SBBQ    DX, R8
	SBBQ    DX, R9
	SBBQ    AX, R10
	CMOVQCC DI, CX
	CMOVQCC R8, BX
	CMOVQCC R9, BP
	CMOVQCC R10, SI

	// Store results
	MOVQ res+0(FP), AX
	MOVQ CX, (AX)
	MOVQ BX, 8(AX)
	MOVQ BP, 16(AX)
	MOVQ SI, 24(AX)
	RET

// func mulNoAdx(res *FieldElement, x *FieldElement, y *FieldElement)
// Requires: CMOV
TEXT ·mulNoAdx(SB), NOSPLIT, $0-24
	MOVQ  x+8(FP), R11
	MOVQ  res+0(FP), AX
	MOVQ  y+16(FP), R12
	MOVQ  (R11), AX
	MULQ  (R12)
	MOVQ  AX, CX
	MOVQ  DX, BX
	MOVQ  (R11), AX
	MULQ  16(R12)
	MOVQ  AX, BP
	MOVQ  DX, SI
	MOVQ  24(R11), AX
	MULQ  8(R12)
	MOVQ  AX, DI
	MOVQ  DX, R8
	MOVQ  24(R11), AX
	MULQ  24(R12)
	MOVQ  AX, R9
	MOVQ  DX, R10
	MOVB  $0x01, R13
	MOVQ  8(R11), AX
	MULQ  (R12)
	CMPB  R13, $0x01
	ADCQ  AX, BX
	ADCQ  DX, BP
	SETCC R13
	MOVQ  (R11), AX
	MULQ  24(R12)
	CMPB  R13, $0x01
	ADCQ  AX, SI
	ADCQ  DX, DI
	SETCC R13
	MOVQ  16(R11), AX
	MULQ  24(R12)
	CMPB  R13, $0x01
	ADCQ  AX, R8
	ADCQ  DX, R9
	SETCC R13
	ADCQ  $0x00, R10
	MOVB  $0x01, R13
	MOVQ  (R11), AX
	MULQ  8(R12)
	CMPB  R13, $0x01
	ADCQ  AX, BX
	ADCQ  DX, BP
	SETCC R13
	MOVQ  8(R11), AX
	MULQ  16(R12)
	CMPB  R13, $0x01
	ADCQ  AX, SI
	ADCQ  DX, DI
	SETCC R13
	MOVQ  24(R11), AX
	MULQ  16(R12)
	CMPB  R13, $0x01
	ADCQ  AX, R8
	ADCQ  DX, R9
	SETCC R13
	ADCQ  $0x00, R10
	MOVB  $0x01, R13
	MOVQ  8(R11), AX
	MULQ  8(R12)
	CMPB  R13, $0x01
	ADCQ  AX, BP
	ADCQ  DX, SI
	SETCC R13
	MOVQ  8(R11), AX
	MULQ  24(R12)
	CMPB  R13, $0x01
	ADCQ  AX, DI
	ADCQ  DX, R8
	SETCC R13
	ADCQ  $0x00, R9
	ADCQ  $0x00, R10
	MOVB  $0x01, R13
	MOVQ  16(R11), AX
	MULQ  (R12)
	CMPB  R13, $0x01
	ADCQ  AX, BP
	ADCQ  DX, SI
	SETCC R13
	MOVQ  16(R11), AX
	MULQ  16(R12)
	CMPB  R13, $0x01
	ADCQ  AX, DI
	ADCQ  DX, R8
	SETCC R13
	ADCQ  $0x00, R9
	ADCQ  $0x00, R10
	MOVB  $0x01, R13
	MOVQ  16(R11), AX
	MULQ  8(R12)
	CMPB  R13, $0x01
	ADCQ  AX, SI
	ADCQ  DX, DI
	SETCC R13
	ADCQ  $0x00, R8
	ADCQ  $0x00, R9
	ADCQ  $0x00, R10
	MOVB  $0x01, R13
	MOVQ  24(R11), AX
	MULQ  (R12)
	CMPB  R13, $0x01
	ADCQ  AX, SI
	ADCQ  DX, DI
	SETCC R13
	ADCQ  $0x00, R8
	ADCQ  $0x00, R9
	ADCQ  $0x00, R10

	// Mod 1st stage
	SHLQ $0x05, R9, R10
	SHLQ $0x05, R8, R9
	SHLQ $0x05, DI, R8
	SHLQ $0x05, SI, DI
	MOVQ $0x07ffffffffffffff, AX
	ANDQ AX, SI
	ADDQ DI, CX
	ADCQ R8, BX
	ADCQ R9, BP
	ADCQ R10, SI
	SHLQ $0x03, R9, R10
	SHLQ $0x03, R8, R9
	SHLQ $0x03, DI, R8
	SHLQ $0x03, DI
	ADDQ DI, CX
	ADCQ R8, BX
	ADCQ R9, BP
	ADCQ R10, SI

	// Mod 2nd stage
	MOVQ SI, R10
	SHRQ $0x3b, R10
	MOVQ $0x07ffffffffffffff, AX
	ANDQ AX, SI

	// regs[7] = regs[7]*9
	LEAQ    (R10)(R10*8), R10
	ADDQ    R10, CX
	ADCQ    $0x00, BX
	ADCQ    $0x00, BP
	ADCQ    $0x00, SI
	MOVQ    $0xffffffffffffffff, DX
	MOVQ    $0xfffffffffffffff7, R11
	MOVQ    CX, DI
	MOVQ    BX, R8
	MOVQ    BP, R9
	MOVQ    SI, R10
	SUBQ    R11, DI
	SBBQ    DX, R8
	SBBQ    DX, R9
	SBBQ    AX, R10
	CMOVQCC DI, CX
	CMOVQCC R8, BX
	CMOVQCC R9, BP
	CMOVQCC R10, SI

	// Store results
	MOVQ res+0(FP), AX
	MOVQ CX, (AX)
	MOVQ BX, 8(AX)
	MOVQ BP, 16(AX)
	MOVQ SI, 24(AX)
	RET

// func mod(res *FieldElement, x *FieldElement)
// Requires: CMOV
TEXT ·mod(SB), NOSPLIT, $0-16
	MOVQ x+8(FP), BX
	MOVQ (BX), AX
	MOVQ 8(BX), CX
	MOVQ 16(BX), DX
	MOVQ 24(BX), BX
	MOVQ BX, R8
	SHRQ $0x3b, R8
	MOVQ $0x07ffffffffffffff, R9
	ANDQ R9, BX

	// regs[7] = regs[7]*9
	LEAQ    (R8)(R8*8), R8
	ADDQ    R8, AX
	ADCQ    $0x00, CX
	ADCQ    $0x00, DX
	ADCQ    $0x00, BX
	MOVQ    $0xffffffffffffffff, R10
	MOVQ    $0xfffffffffffffff7, R11
	MOVQ    AX, BP
	MOVQ    CX, SI
	MOVQ    DX, DI
	MOVQ    BX, R8
	SUBQ    R11, BP
	SBBQ    R10, SI
	SBBQ    R10, DI
	SBBQ    R9, R8
	CMOVQCC BP, AX
	CMOVQCC SI, CX
	CMOVQCC DI, DX
	CMOVQCC R8, BX

	// Store results
	MOVQ res+0(FP), BP
	MOVQ AX, (BP)
	MOVQ CX, 8(BP)
	MOVQ DX, 16(BP)
	MOVQ BX, 24(BP)
	RET

// func mul2(res *FieldElement, x *FieldElement)
// Requires: CMOV
TEXT ·mul2(SB), NOSPLIT, $0-16
	MOVQ    x+8(FP), BX
	MOVQ    (BX), AX
	MOVQ    8(BX), CX
	MOVQ    16(BX), DX
	MOVQ    24(BX), BX
	SHLQ    $0x01, DX, BX
	SHLQ    $0x01, CX, DX
	SHLQ    $0x01, AX, CX
	SHLQ    $0x01, AX
	MOVQ    $0xffffffffffffffff, R10
	MOVQ    $0xfffffffffffffff7, R9
	MOVQ    $0x07ffffffffffffff, R11
	MOVQ    AX, BP
	MOVQ    CX, SI
	MOVQ    DX, DI
	MOVQ    BX, R8
	SUBQ    R9, BP
	SBBQ    R10, SI
	SBBQ    R10, DI
	SBBQ    R11, R8
	CMOVQCC BP, AX
	CMOVQCC SI, CX
	CMOVQCC DI, DX
	CMOVQCC R8, BX

	// Store results
	MOVQ res+0(FP), BP
	MOVQ AX, (BP)
	MOVQ CX, 8(BP)
	MOVQ DX, 16(BP)
	MOVQ BX, 24(BP)
	RET

// func div2(res *FieldElement, x *FieldElement)
TEXT ·div2(SB), NOSPLIT, $0-16
	MOVQ x+8(FP), BX
	MOVQ res+0(FP), AX
	MOVQ (BX), AX
	MOVQ 8(BX), CX
	MOVQ 16(BX), DX
	MOVQ 24(BX), BX
	SHRQ $0x01, CX, AX
	SHRQ $0x01, DX, CX
	SHRQ $0x01, BX, DX
	SARQ $0x01, BX

	// Store results
	MOVQ res+0(FP), BP
	MOVQ AX, (BP)
	MOVQ CX, 8(BP)
	MOVQ DX, 16(BP)
	MOVQ BX, 24(BP)
	RET

// func sub(res *FieldElement, x *FieldElement, y *FieldElement)
TEXT ·sub(SB), NOSPLIT, $0-24
	MOVQ x+8(FP), BX
	MOVQ y+16(FP), BP
	MOVQ (BX), AX
	MOVQ 8(BX), CX
	MOVQ 16(BX), DX
	MOVQ 24(BX), BX
	XORQ SI, SI
	SUBQ (BP), AX
	SBBQ 8(BP), CX
	SBBQ 16(BP), DX
	SBBQ 24(BP), BX
	SBBQ $0x00, SI
	MOVQ $0xfffffffffffffff7, BP
	ANDQ SI, BP
	MOVQ $0x07ffffffffffffff, DI
	ANDQ SI, DI
	ADDQ BP, AX
	ADCQ SI, CX
	ADCQ SI, DX
	ADCQ DI, BX

	// Store results
	MOVQ res+0(FP), BP
	MOVQ AX, (BP)
	MOVQ CX, 8(BP)
	MOVQ DX, 16(BP)
	MOVQ BX, 24(BP)
	RET

// func add(res *FieldElement, x *FieldElement, y *FieldElement)
// Requires: CMOV
TEXT ·add(SB), NOSPLIT, $0-24
	MOVQ    x+8(FP), BX
	MOVQ    y+16(FP), BP
	MOVQ    res+0(FP), AX
	MOVQ    (BX), AX
	MOVQ    8(BX), CX
	MOVQ    16(BX), DX
	MOVQ    24(BX), BX
	ADDQ    (BP), AX
	ADCQ    8(BP), CX
	ADCQ    16(BP), DX
	ADCQ    24(BP), BX
	MOVQ    $0xffffffffffffffff, R10
	MOVQ    $0xfffffffffffffff7, R9
	MOVQ    $0x07ffffffffffffff, R11
	MOVQ    AX, BP
	MOVQ    CX, SI
	MOVQ    DX, DI
	MOVQ    BX, R8
	SUBQ    R9, BP
	SBBQ    R10, SI
	SBBQ    R10, DI
	SBBQ    R11, R8
	CMOVQCC BP, AX
	CMOVQCC SI, CX
	CMOVQCC DI, DX
	CMOVQCC R8, BX

	// Store results
	MOVQ res+0(FP), BP
	MOVQ AX, (BP)
	MOVQ CX, 8(BP)
	MOVQ DX, 16(BP)
	MOVQ BX, 24(BP)
	RET

// func mulD(res *FieldElement, x *FieldElement)
// Requires: ADX, BMI2, CMOV
TEXT ·mulD(SB), NOSPLIT, $0-16
	MOVQ  x+8(FP), R11
	MOVQ  res+0(FP), R12
	XORQ  R10, R10
	XORQ  BX, BX
	XORQ  BP, BP
	XORQ  SI, SI
	XORQ  DI, DI
	XORQ  R8, R8
	XORQ  R9, R9
	MOVQ  $0x0000000000000496, DX
	MULXQ (R11), AX, CX

	// x[0]*y[1]
	MULXQ 8(R11), R14, R13
	ADCXQ R14, CX
	ADOXQ R13, BX

	// x[0]*y[2]
	MULXQ 16(R11), R14, R13
	ADCXQ R14, BX
	ADOXQ R13, BP

	// x[0]*y[3]
	MULXQ 24(R11), R11, DX
	ADCXQ R11, BP
	ADOXQ DX, SI

	// Carry 4-6
	ADCXQ R10, SI
	ADOXQ R10, DI
	ADCXQ R10, DI

	// Mod 1st stage
	SHLQ $0x05, R8, R9
	SHLQ $0x05, DI, R8
	SHLQ $0x05, SI, DI
	SHLQ $0x05, BP, SI
	MOVQ $0x07ffffffffffffff, DX
	ANDQ DX, BP
	ADDQ SI, AX
	ADCQ DI, CX
	ADCQ R8, BX
	ADCQ R9, BP
	SHLQ $0x03, R8, R9
	SHLQ $0x03, DI, R8
	SHLQ $0x03, SI, DI
	SHLQ $0x03, SI
	ADDQ SI, AX
	ADCQ DI, CX
	ADCQ R8, BX
	ADCQ R9, BP

	// Mod 2nd stage
	MOVQ BP, R9
	SHRQ $0x3b, R9
	MOVQ $0x07ffffffffffffff, DX
	ANDQ DX, BP

	// regs[7] = regs[7]*9
	LEAQ    (R9)(R9*8), R9
	ADDQ    R9, AX
	ADCQ    $0x00, CX
	ADCQ    $0x00, BX
	ADCQ    $0x00, BP
	MOVQ    $0xffffffffffffffff, R10
	MOVQ    $0xfffffffffffffff7, R11
	MOVQ    AX, SI
	MOVQ    CX, DI
	MOVQ    BX, R8
	MOVQ    BP, R9
	SUBQ    R11, SI
	SBBQ    R10, DI
	SBBQ    R10, R8
	SBBQ    DX, R9
	CMOVQCC SI, AX
	CMOVQCC DI, CX
	CMOVQCC R8, BX
	CMOVQCC R9, BP
	MOVQ    $0xfffffffffffffff7, DX
	MOVQ    $0xffffffffffffffff, SI
	MOVQ    $0xffffffffffffffff, DI
	MOVQ    $0x07ffffffffffffff, R8
	SUBQ    AX, DX
	SBBQ    CX, SI
	SBBQ    BX, DI
	SBBQ    BP, R8
	MOVQ    DX, (R12)
	MOVQ    SI, 8(R12)
	MOVQ    DI, 16(R12)
	MOVQ    R8, 24(R12)
	RET

// func selectPoint(res *Point, table *[16]Point, index uint64)
// Requires: SSE2
TEXT ·selectPoint(SB), NOSPLIT, $0-24
	MOVQ    index+16(FP), X0
	MOVQ    table+8(FP), AX
	MOVQ    res+0(FP), CX
	PSHUFD  $0x00, X0, X0
	PXOR    X1, X1
	PXOR    X2, X2
	PXOR    X3, X3
	PXOR    X4, X4
	PXOR    X5, X5
	PXOR    X6, X6
	PXOR    X7, X7
	PXOR    X8, X8
	MOVQ    $0x0000000000000010, DX
	PCMPEQL X9, X9
	PXOR    X11, X11
	PSUBL   X9, X11
	PXOR    X9, X9

loop:
	MOVO    X9, X10
	PCMPEQL X0, X10
	MOVOU   (AX), X12
	PAND    X10, X12
	POR     X12, X1
	MOVOU   16(AX), X12
	PAND    X10, X12
	POR     X12, X2
	MOVOU   32(AX), X12
	PAND    X10, X12
	POR     X12, X3
	MOVOU   48(AX), X12
	PAND    X10, X12
	POR     X12, X4
	MOVOU   64(AX), X12
	PAND    X10, X12
	POR     X12, X5
	MOVOU   80(AX), X12
	PAND    X10, X12
	POR     X12, X6
	MOVOU   96(AX), X12
	PAND    X10, X12
	POR     X12, X7
	MOVOU   112(AX), X12
	PAND    X10, X12
	POR     X12, X8
	ADDQ    $0x80, AX
	PADDL   X11, X9
	SUBQ    $0x01, DX
	JNZ     loop
	MOVOU   X1, (CX)
	MOVOU   X2, 16(CX)
	MOVOU   X3, 32(CX)
	MOVOU   X4, 48(CX)
	MOVOU   X5, 64(CX)
	MOVOU   X6, 80(CX)
	MOVOU   X7, 96(CX)
	MOVOU   X8, 112(CX)
	RET

// func fastInverse(res *FieldElement, x *FieldElement)
// Requires: SSE2
TEXT ·fastInverse(SB), NOSPLIT, $8-16
	MOVQ x+8(FP), AX
	MOVQ (AX), R8
	MOVQ 8(AX), R9
	MOVQ 16(AX), R10
	MOVQ 24(AX), R11
	MOVQ SP, X0
	MOVQ $0xfffffffffffffff7, AX
	MOVQ $0xffffffffffffffff, BX
	MOVQ $0xffffffffffffffff, CX
	MOVQ $0x07ffffffffffffff, DX
	MOVQ $0x00000000, (SP)
	XORQ R12, R12
	MOVQ $0x00000000, SI
	XORQ R13, R13
	MOVQ $0x00000000, DI
	XORQ R14, R14
	MOVQ $0x00000000, BP
	XORQ R15, R15
	MOVQ $0x00000001, R12

mainloop:
	CMPQ AX, $0x00
	JNZ  notzero
	CMPQ BX, $0x00
	JNZ  notzero
	CMPQ CX, $0x00
	JNZ  notzero
	CMPQ DX, $0x00
	JZ   aftermain

notzero:
	TESTQ $0x00000001, AX
	JNZ   afteru

uloop:
	TESTQ $0x00000001, (SP)
	JZ    divu
	SUBQ  $0xf7, (SP)
	SBBQ  $0xff, SI
	SBBQ  $0xff, DI
	MOVQ  (SP), SI
	MOVQ  $0x07ffffffffffffff, SI
	SBBQ  SI, BP
	MOVQ  X1, SI

divu:
	SHRQ  $0x01, SI, (SP)
	SHRQ  $0x01, DI, SI
	SHRQ  $0x01, BP, DI
	SARQ  $0x01, BP
	SHRQ  $0x01, BX, AX
	SHRQ  $0x01, CX, BX
	SHRQ  $0x01, DX, CX
	SARQ  $0x01, DX
	TESTQ $0x00000001, AX
	JZ    uloop

afteru:
	TESTQ $0x00000001, R8
	JNZ   afterv

vloop:
	TESTQ $0x00000001, R12
	JZ    divv
	SUBQ  $0xf7, R12
	SBBQ  $0xff, R13
	SBBQ  $0xff, R14
	MOVQ  R12, SI
	MOVQ  $0x07ffffffffffffff, SI
	SBBQ  SI, R15
	MOVQ  X1, SI

divv:
	SHRQ  $0x01, R13, R12
	SHRQ  $0x01, R14, R13
	SHRQ  $0x01, R15, R14
	SARQ  $0x01, R15
	SHRQ  $0x01, R9, R8
	SHRQ  $0x01, R10, R9
	SHRQ  $0x01, R11, R10
	SARQ  $0x01, R11
	TESTQ $0x00000001, R8
	JZ    vloop

afterv:
	CMPQ DX, R11
	JB   greaterv
	JNE  greateru
	CMPQ CX, R10
	JB   greaterv
	JNE  greateru
	CMPQ BX, R9
	JB   greaterv
	JNE  greateru
	CMPQ AX, R8
	JB   greaterv
	JNE  greateru

greateru:
	SUBQ R8, AX
	SBBQ R9, BX
	SBBQ R10, CX
	SBBQ R11, DX
	SUBQ R12, (SP)
	SBBQ R13, SI
	SBBQ R14, DI
	SBBQ R15, BP
	JMP  mainloop

greaterv:
	SUBQ AX, R8
	SBBQ BX, R9
	SBBQ CX, R10
	SBBQ DX, R11
	SUBQ (SP), R12
	SBBQ SI, R13
	SBBQ DI, R14
	SBBQ BP, R15
	JMP  mainloop

aftermain:
	MOVQ X0, SP
	MOVQ res+0(FP), CX
	CMPQ R15, $0x00
	JNS  store
	ADDQ $0xf7, R12
	ADCQ $0xff, R13
	ADCQ $0xff, R14
	MOVQ $0x07ffffffffffffff, AX
	ADCQ AX, R15

store:
	MOVQ R12, (CX)
	MOVQ R13, 8(CX)
	MOVQ R14, 16(CX)
	MOVQ R15, 24(CX)
	RET

// func sqr(res *FieldElement, x *FieldElement)
// Requires: ADX, BMI2, CMOV
TEXT ·sqr(SB), NOSPLIT, $0-16
	MOVQ x+8(FP), AX

	// load x to registers
	MOVQ (AX), R13
	MOVQ 8(AX), R10
	MOVQ 16(AX), R11
	MOVQ 24(AX), R12

	// clear flags
	XORQ AX, AX

	// fill registers
	// x[3]*x[2]
	MOVQ  R12, DX
	MULXQ R11, DI, R8

	// x[0]*x[3]
	MOVQ  R13, DX
	MULXQ R12, BP, SI

	// x[0]*x[1]
	MULXQ R10, CX, BX

	// 2-4 pass
	// x[0]*y[2]
	MULXQ R11, R14, DX
	ADCXQ R14, BX
	ADOXQ DX, BP

	// x[1]*y[2]
	MOVQ  R10, DX
	MULXQ R11, R15, R14
	ADCXQ R15, BP
	ADOXQ R14, SI

	// x[1]*y[3]
	MULXQ R12, R14, DX
	ADCXQ R14, SI
	ADOXQ DX, DI

	// Carry 5-8
	ADCXQ AX, DI
	ADOXQ AX, R8
	ADCXQ AX, R8
	ADOXQ AX, R9
	ADCXQ AX, R9

	// clear 7
	XORQ R9, R9

	// multiply by 2 by shifting
	SHLQ $0x01, R8, R9
	SHLQ $0x01, DI, R8
	SHLQ $0x01, SI, DI
	SHLQ $0x01, BP, SI
	SHLQ $0x01, BX, BP
	SHLQ $0x01, CX, BX
	SHLQ $0x01, CX

	// add all z*z
	MOVQ  R13, DX
	MULXQ R13, AX, DX
	ADDQ  DX, CX
	MOVQ  R10, DX
	MULXQ R10, R10, DX
	ADCQ  R10, BX
	ADCQ  DX, BP
	MOVQ  R11, DX
	MULXQ R11, R10, DX
	ADCQ  R10, SI
	ADCQ  DX, DI
	MOVQ  R12, DX
	MULXQ R12, R10, DX
	ADCQ  R10, R8
	ADCQ  DX, R9

	// Mod 1st stage
	SHLQ $0x05, R8, R9
	SHLQ $0x05, DI, R8
	SHLQ $0x05, SI, DI
	SHLQ $0x05, BP, SI
	MOVQ $0x07ffffffffffffff, DX
	ANDQ DX, BP
	ADDQ SI, AX
	ADCQ DI, CX
	ADCQ R8, BX
	ADCQ R9, BP
	SHLQ $0x03, R8, R9
	SHLQ $0x03, DI, R8
	SHLQ $0x03, SI, DI
	SHLQ $0x03, SI
	ADDQ SI, AX
	ADCQ DI, CX
	ADCQ R8, BX
	ADCQ R9, BP

	// Mod 2nd stage
	MOVQ BP, R9
	SHRQ $0x3b, R9
	MOVQ $0x07ffffffffffffff, DX
	ANDQ DX, BP

	// regs[7] = regs[7]*9
	LEAQ    (R9)(R9*8), R9
	ADDQ    R9, AX
	ADCQ    $0x00, CX
	ADCQ    $0x00, BX
	ADCQ    $0x00, BP
	MOVQ    $0xffffffffffffffff, R10
	MOVQ    $0xfffffffffffffff7, R11
	MOVQ    AX, SI
	MOVQ    CX, DI
	MOVQ    BX, R8
	MOVQ    BP, R9
	SUBQ    R11, SI
	SBBQ    R10, DI
	SBBQ    R10, R8
	SBBQ    DX, R9
	CMOVQCC SI, AX
	CMOVQCC DI, CX
	CMOVQCC R8, BX
	CMOVQCC R9, BP

	// Store results
	MOVQ res+0(FP), DX
	MOVQ AX, (DX)
	MOVQ CX, 8(DX)
	MOVQ BX, 16(DX)
	MOVQ BP, 24(DX)
	RET

// func shl(res *[8]uint64, x *[8]uint64)
TEXT ·shl(SB), NOSPLIT, $0-16
	MOVQ x+8(FP), R8
	MOVQ res+0(FP), R9
	MOVQ (R8), AX
	MOVQ 8(R8), CX
	MOVQ 16(R8), DX
	MOVQ 24(R8), BX
	MOVQ 32(R8), BP
	MOVQ 40(R8), SI
	MOVQ 48(R8), DI
	MOVQ 56(R8), R8
	SHLQ $0x01, DI, R8
	SHLQ $0x01, SI, DI
	SHLQ $0x01, BP, SI
	SHLQ $0x01, BX, BP
	SHLQ $0x01, DX, BX
	SHLQ $0x01, CX, DX
	SHLQ $0x01, CX
	MOVQ AX, (R9)
	MOVQ CX, 8(R9)
	MOVQ DX, 16(R9)
	MOVQ BX, 24(R9)
	MOVQ BP, 32(R9)
	MOVQ SI, 40(R9)
	MOVQ DI, 48(R9)
	MOVQ R8, 56(R9)
	RET

// func shl2(res *[8]uint64, x *[8]uint64)
TEXT ·shl2(SB), NOSPLIT, $0-16
	MOVQ x+8(FP), R8
	MOVQ res+0(FP), R9
	MOVQ (R8), AX
	MOVQ 8(R8), CX
	MOVQ 16(R8), DX
	MOVQ 24(R8), BX
	MOVQ 32(R8), BP
	MOVQ 40(R8), SI
	MOVQ 48(R8), DI
	MOVQ 56(R8), R8
	MOVQ DI, R10
	SHRQ $0x3f, R10
	SHLQ $0x01, R8
	ORQ  R8, R10
	MOVQ SI, R10
	SHRQ $0x3f, R10
	SHLQ $0x01, DI
	ORQ  DI, R10
	MOVQ BP, R10
	SHRQ $0x3f, R10
	SHLQ $0x01, SI
	ORQ  SI, R10
	MOVQ BX, R10
	SHRQ $0x3f, R10
	SHLQ $0x01, BP
	ORQ  BP, R10
	MOVQ DX, R10
	SHRQ $0x3f, R10
	SHLQ $0x01, BX
	ORQ  BX, R10
	MOVQ CX, R10
	SHRQ $0x3f, R10
	SHLQ $0x01, DX
	ORQ  DX, R10
	SHLQ $0x01, CX
	MOVQ AX, (R9)
	MOVQ CX, 8(R9)
	MOVQ DX, 16(R9)
	MOVQ BX, 24(R9)
	MOVQ BP, 32(R9)
	MOVQ SI, 40(R9)
	MOVQ DI, 48(R9)
	MOVQ R8, 56(R9)
	RET
